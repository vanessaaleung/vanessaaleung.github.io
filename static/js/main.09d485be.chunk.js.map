{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","style","backgroundColor","bgColor","value","Board","createBoard","board","i","boardRow","j","push","this","renderSquare","key","squares","React","Component","Game","state","history","Array","fill","row","column","stepNumber","xIsNext","descending","slice","current","length","Math","floor","col","calculateWinner","setState","concat","step","status","winner","moves","map","move","desc","location","toString","class","jumpTo","handleClick","handleSort","reverse","lines","filled","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"2PAKA,SAASA,EAAOC,GACd,OACE,4BAAQC,UAAU,SAASC,QAASF,EAAME,QAASC,MAAO,CAACC,gBAAgBJ,EAAMK,UAChFL,EAAMM,O,IAOLC,E,4MAYJC,YAAc,WAGV,IAFA,IAAIC,EAAQ,GAEHC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAG1B,IAFA,IAAIC,EAAW,GAENC,EAAI,EAAIF,EAAGE,EAAI,EAAIF,EAAI,EAAGE,IACjCD,EAASE,KAAKC,KAAKC,aAAaH,IAGlCH,EAAMI,KAAK,yBAAKG,IAAKN,GAAIC,IAE3B,OAAOF,G,2DAvBEC,GAAI,IAAD,OACd,OAAO,kBAACX,EAAD,CACLiB,IAAKN,EACLJ,MAAOQ,KAAKd,MAAMiB,QAAQP,GAC1BR,QAAS,kBAAM,EAAKF,MAAME,QAAQQ,IAClCL,QAASS,KAAKd,MAAMK,QAAQK,O,+BAsB9B,OACE,6BACGI,KAAKN,mB,GA9BMU,IAAMC,WAoCpBC,E,kDACJ,WAAYpB,GAAO,IAAD,8BAChB,cAAMA,IACDqB,MAAQ,CACXC,QAAS,CAAC,CACRL,QAASM,MAAM,GAAGC,KAAK,MACvBnB,QAASkB,MAAM,GAAGC,KAAK,eACvBC,IAAK,EACLC,OAAQ,IAEVC,WAAY,EACZC,SAAS,EACTC,YAAY,GAXE,E,wDAeNnB,GACV,IAAMY,EAAUR,KAAKO,MAAMC,QAAQQ,MAAM,EAAGhB,KAAKO,MAAMM,WAAa,GAC9DI,EAAUT,EAAQA,EAAQU,OAAS,GACnCf,EAAUc,EAAQd,QAAQa,QAC1BzB,EAAU0B,EAAQ1B,QAElBoB,EAAMQ,KAAKC,MAAMxB,EAAI,EAAI,GACzByB,EAAMF,KAAKC,MAAMxB,EAAI,EAAI,GAE3B0B,EAAgBnB,EAASZ,IAAYY,EAAQP,KAIjDO,EAAQP,GAAKI,KAAKO,MAAMO,QAAU,IAAM,IAExCd,KAAKuB,SAAS,CACZf,QAASA,EAAQgB,OAAO,CAAC,CACvBrB,QAASA,EACTZ,QAASA,EACToB,IAAKA,EACLU,IAAKA,KAEPR,WAAYL,EAAQU,OACpBJ,SAAUd,KAAKO,MAAMO,QACrBC,YAAY,O,6BAITU,GACLzB,KAAKuB,SAAS,CACZV,WAAYY,EACZX,QAAUW,EAAO,IAAO,M,mCAKxBzB,KAAKuB,UAAS,SAAAhB,GAAK,MAAK,CACtBQ,YAAaR,EAAMQ,iB,+BAIf,IA0BJW,EA1BG,OACDlB,EAAUR,KAAKO,MAAMC,QACrBS,EAAUT,EAAQR,KAAKO,MAAMM,YAC7Bc,EAASL,EAAgBL,EAAQd,QAASc,EAAQ1B,SAClDqC,EAAQpB,EAAQqB,KAAI,SAACJ,EAAMK,GAC/B,IAAMC,EAAOD,EAAO,eAAiBA,EAAO,mBACtCE,EAAoB,IAATF,EAAa,KAAO,CAACtB,EAAQsB,GAAMnB,IAAMH,EAAQsB,GAAMT,KAAKY,WAAa,IAAM,KAEhG,OACE,wBAAI/B,IAAK4B,GAENA,IAAS,EAAKvB,MAAMM,WACjB,4BAAQqB,MAAM,UAAU9C,QAAS,WAC3BuC,GAAe,EAAKQ,OAAOL,KAC/B,2BAAIC,EAAMC,IAEZ,4BAAQE,MAAM,UAAU9C,QAAS,WAC3BuC,GAAe,EAAKQ,OAAOL,KAChCC,EAAMC,OAmBjB,OATEN,EADEC,GAAqB,SAAXA,EACH,WAAaA,EAEJ,SAAXA,EACE,OAGA,iBAAmB3B,KAAKO,MAAMO,QAAU,IAAK,KAKtD,yBAAK3B,UAAU,QACb,yBAAKA,UAAU,aACb,4CAEF,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,cACb,kBAACM,EAAD,CACEU,QAASc,EAAQd,QACjBf,QAAS,SAACQ,GAAD,OAAO,EAAKwC,YAAYxC,IACjCL,QAAS0B,EAAQ1B,WAGrB,yBAAKJ,UAAU,aAEb,6BAAMuC,GACN,4BAAQvC,UAAU,UAAUC,QAAS,kBAAM,EAAKiD,eAAhD,cACA,4BAAKrC,KAAKO,MAAMQ,WAAaa,EAAMU,UAAYV,U,GAhHxCxB,IAAMC,WAwHzB,SAASiB,EAAgBnB,EAASZ,GAchC,IAbA,IAAMgD,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGLC,EAAS,EAEJ5C,EAAI,EAAGA,EAAI2C,EAAMrB,OAAQtB,IAAI,CAAC,IAAD,cAClB2C,EAAM3C,GADY,GAC7B6C,EAD6B,KAC1BC,EAD0B,KACvBC,EADuB,KAEpC,GAAIxC,EAAQsC,IAAMtC,EAAQsC,KAAOtC,EAAQuC,IAAMvC,EAAQsC,KAAOtC,EAAQwC,GAEpE,OADApD,EAAQkD,GAAKlD,EAAQmD,GAAKnD,EAAQoD,GAAK,UAChCxC,EAAQsC,GAERtC,EAAQsC,IAAMtC,EAAQuC,IAAMvC,EAAQwC,KAC3CH,GAAU,GAMd,OAAe,IAAXA,EACK,OAGA,KAMXI,IAASC,OACP,kBAACvC,EAAD,MACAwC,SAASC,eAAe,W","file":"static/js/main.09d485be.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n// function component\nfunction Square(props) {\n  return (\n    <button className=\"square\" onClick={props.onClick} style={{backgroundColor:props.bgColor}}>\n    {props.value}\n    </button>\n    \n    );\n\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return <Square \n      key={i}\n      value={this.props.squares[i]}\n      onClick={() => this.props.onClick(i)}\n      bgColor={this.props.bgColor[i]}\n    />\n    ;\n  }\n\n  // Rewrite Board to use two loops to make the squares instead of hardcoding them\n  createBoard = function createBoard() {\n      let board = []\n\n      for (let i = 0; i < 3; i++) {\n        let boardRow = []\n        \n        for (let j = 3 * i; j < 3 * i + 3; j++) {\n          boardRow.push(this.renderSquare(j))\n        }\n\n        board.push(<div key={i}>{boardRow}</div>)\n      }\n      return board\n  }\n\n  render() {\n    return (\n      <div>\n        {this.createBoard()}\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null),\n        bgColor: Array(9).fill(\"transparent\"),\n        row: 0,\n        column: 0,\n      }],\n      stepNumber: 0,\n      xIsNext: true,\n      descending: false,\n    };\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();  //slice(): create a copy\n    const bgColor = current.bgColor;\n    // Display the location for each move in the format (col, row)\n    const row = Math.floor(i / 3 + 1);\n    const col = Math.floor(i % 3 + 1);\n\n    if (calculateWinner(squares, bgColor) || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n\n    this.setState({\n      history: history.concat([{\n        squares: squares,\n        bgColor: bgColor,\n        row: row,\n        col: col,\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n      descending: false,\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0,\n    })\n  }\n\n  handleSort() {\n      this.setState(state => ({ \n        descending: !state.descending\n      }));\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares, current.bgColor);\n    const moves = history.map((step, move) => {\n      const desc = move ? 'Go to move #' + move : 'Go to game start';\n      const location = move !== 0 ? \" (\" + [history[move].row , history[move].col].toString() + \")\" : null;\n\n      return (\n        <li key={move}>\n          {/* Bold the currently selected item in the move list */}\n          {move === this.state.stepNumber\n            ? <button class=\"moveBtn\" onClick={() => \n                {if(winner){} else{this.jumpTo(move)}}}>\n                <b>{desc}{location}</b>\n              </button> \n            : <button class=\"moveBtn\" onClick={() => \n                {if(winner){} else{this.jumpTo(move)}}}>\n              {desc}{location}\n              </button> \n          }\n          \n        </li>\n      );\n    });\n\n    let status;\n    if (winner && winner !== \"Draw\") {\n      status = 'Winner: ' + winner;\n    } \n    else if (winner === \"Draw\"){\n      status = \"Draw\"\n    }\n    else{\n      status = 'Next player: ' + (this.state.xIsNext ? 'X': 'O');\n    }\n\n    return (\n      \n      <div className=\"game\">\n        <div className=\"game-name\">\n          <h1>Tic-Tac-Toe</h1>\n        </div>\n        <div className=\"game-content\">\n          <div className=\"game-board\">\n            <Board \n              squares={current.squares}\n              onClick={(i) => this.handleClick(i)}\n              bgColor={current.bgColor}\n                />\n          </div>\n          <div className=\"game-info\">\n            {/* Add a toggle button that lets you sort the moves in either ascending or descending order. */}\n            <div>{status}</div>\n            <button className=\"sortBtn\" onClick={() => this.handleSort()}>SORT MOVES</button>\n            <ol>{this.state.descending ? moves.reverse() : moves}</ol>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction calculateWinner(squares, bgColor) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n\n  let filled = 0;\n\n  for (let i = 0; i < lines.length; i++){\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      bgColor[a] = bgColor[b] = bgColor[c] = \"#ffd31d\";\n      return squares[a];\n    }\n    else if (squares[a] && squares[b] && squares[c]) {\n      filled += 1;\n    }\n    else{}\n  }\n\n  // When no one wins, display a message about the result being a draw.\n  if (filled === 8){\n    return \"Draw\";\n  }\n  else{\n    return null;\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}